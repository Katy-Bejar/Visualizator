def blosum50():
    return {
        'A': {'A': 5, 'R': -2, 'N': -1, 'D': -2, 'C': -1, 'Q': -1, 'E': -1, 'G': 0, 'H': -2, 'I': -1, 'L': -2, 'K': -1, 'M': -1, 'F': -3, 'P': -1, 'S': 1, 'T': 0, 'W': -3, 'Y': -2, 'V': 0},
        'R': {'A': -2, 'R': 7, 'N': -1, 'D': -2, 'C': -4, 'Q': 1, 'E': 0, 'G': -3, 'H': 0, 'I': -4, 'L': -3, 'K': 3, 'M': -2, 'F': -3, 'P': -3, 'S': -1, 'T': -1, 'W': -3, 'Y': -1, 'V': -3},
        'N': {'A': -1, 'R': -1, 'N': 7, 'D': 2, 'C': -2, 'Q': 0, 'E': 0, 'G': 0, 'H': 1, 'I': -4, 'L': -4, 'K': 0, 'M': -2, 'F': -3, 'P': -2, 'S': 1, 'T': 0, 'W': -4, 'Y': -2, 'V': -3},
        'D': {'A': -2, 'R': -2, 'N': 2, 'D': 8, 'C': -4, 'Q': 0, 'E': 2, 'G': -1, 'H': -1, 'I': -4, 'L': -4, 'K': -1, 'M': -4, 'F': -5, 'P': -1, 'S': 0, 'T': -1, 'W': -5, 'Y': -3, 'V': -4},
        'C': {'A': -1, 'R': -4, 'N': -2, 'D': -4, 'C': 13, 'Q': -3, 'E': -3, 'G': -3, 'H': -3, 'I': -1, 'L': -1, 'K': -3, 'M': -1, 'F': -2, 'P': -4, 'S': -1, 'T': -1, 'W': -5, 'Y': -3, 'V': -1},
        'Q': {'A': -1, 'R': 1, 'N': 0, 'D': 0, 'C': -3, 'Q': 7, 'E': 2, 'G': -2, 'H': 1, 'I': -3, 'L': -2, 'K': 2, 'M': 0, 'F': -4, 'P': -1, 'S': -1, 'T': -1, 'W': -1, 'Y': -1, 'V': -3},
        'E': {'A': -1, 'R': 0, 'N': 0, 'D': 2, 'C': -3, 'Q': 2, 'E': 6, 'G': -3, 'H': 0, 'I': -4, 'L': -3, 'K': 1, 'M': -2, 'F': -3, 'P': -1, 'S': 0, 'T': -1, 'W': -3, 'Y': -2, 'V': -3},
        'G': {'A': 0, 'R': -3, 'N': 0, 'D': -1, 'C': -3, 'Q': -2, 'E': -3, 'G': 8, 'H': -2, 'I': -4, 'L': -4, 'K': -2, 'M': -3, 'F': -4, 'P': -2, 'S': 0, 'T': -2, 'W': -3, 'Y': -3, 'V': -4},
        'H': {'A': -2, 'R': 0, 'N': 1, 'D': -1, 'C': -3, 'Q': 1, 'E': 0, 'G': -2, 'H': 10, 'I': -4, 'L': -3, 'K': -1, 'M': -1, 'F': -1, 'P': -2, 'S': -1, 'T': -2, 'W': -3, 'Y': 2, 'V': -4},
        'I': {'A': -1, 'R': -4, 'N': -4, 'D': -4, 'C': -1, 'Q': -3, 'E': -4, 'G': -4, 'H': -4, 'I': 5, 'L': 2, 'K': -3, 'M': 2, 'F': 0, 'P': -4, 'S': -2, 'T': -1, 'W': -3, 'Y': -1, 'V': 4},
        'L': {'A': -2, 'R': -3, 'N': -4, 'D': -4, 'C': -1, 'Q': -2, 'E': -3, 'G': -4, 'H': -3, 'I': 2, 'L': 5, 'K': -3, 'M': 3, 'F': 1, 'P': -3, 'S': -3, 'T': -1, 'W': -2, 'Y': -1, 'V': 1},
        'K': {'A': -1, 'R': 3, 'N': 0, 'D': -1, 'C': -3, 'Q': 2, 'E': 1, 'G': -2, 'H': -1, 'I': -3, 'L': -3, 'K': 6, 'M': -2, 'F': -3, 'P': -1, 'S': 0, 'T': -1, 'W': -3, 'Y': -2, 'V': -3},
        'M': {'A': -1, 'R': -2, 'N': -2, 'D': -4, 'C': -1, 'Q': 0, 'E': -2, 'G': -3, 'H': -1, 'I': 2, 'L': 3, 'K': -2, 'M': 7, 'F': 0, 'P': -2, 'S': -2, 'T': -1, 'W': -1, 'Y': -1, 'V': 1},
        'F': {'A': -3, 'R': -3, 'N': -3, 'D': -5, 'C': -2, 'Q': -4, 'E': -3, 'G': -4, 'H': -1, 'I': 0, 'L': 1, 'K': -3, 'M': 0, 'F': 8, 'P': -4, 'S': -3, 'T': -2, 'W': 1, 'Y': 4, 'V': -1},
        'P': {'A': -1, 'R': -3, 'N': -2, 'D': -1, 'C': -4, 'Q': -1, 'E': -1, 'G': -2, 'H': -2, 'I': -4, 'L': -3, 'K': -1, 'M': -2, 'F': -4, 'P': 10, 'S': -1, 'T': -1, 'W': -4, 'Y': -3, 'V': -3},
        'S': {'A': 1, 'R': -1, 'N': 1, 'D': 0, 'C': -1, 'Q': -1, 'E': 0, 'G': 0, 'H': -1, 'I': -2, 'L': -3, 'K': 0, 'M': -2, 'F': -3, 'P': -1, 'S': 5, 'T': 2, 'W': -4, 'Y': -2, 'V': -2},
        'T': {'A': 0, 'R': -1, 'N': 0, 'D': -1, 'C': -1, 'Q': -1, 'E': -1, 'G': -2, 'H': -2, 'I': -1, 'L': -1, 'K': -1, 'M': -1, 'F': -2, 'P': -1, 'S': 2, 'T': 5, 'W': -3, 'Y': -2, 'V': 0},
        'W': {'A': -3, 'R': -3, 'N': -4, 'D': -5, 'C': -5, 'Q': -1, 'E': -3, 'G': -3, 'H': -3, 'I': -3, 'L': -2, 'K': -3, 'M': -1, 'F': 1, 'P': -4, 'S': -4, 'T': -3, 'W': 15, 'Y': 2, 'V': -3},
        'Y': {'A': -2, 'R': -1, 'N': -2, 'D': -3, 'C': -3, 'Q': -1, 'E': -2, 'G': -3, 'H': 2, 'I': -1, 'L': -1, 'K': -2, 'M': -1, 'F': 4, 'P': -3, 'S': -2, 'T': -2, 'W': 2, 'Y': 8, 'V': -1},
        'V': {'A': 0, 'R': -3, 'N': -3, 'D': -4, 'C': -1, 'Q': -3, 'E': -3, 'G': -4, 'H': -4, 'I': 4, 'L': 1, 'K': -3, 'M': 1, 'F': -1, 'P': -3, 'S': -2, 'T': 0, 'W': -3, 'Y': -1, 'V': 5}
    }

def protein_alignment(seq1, seq2, gap=-1):
    blosum = blosum50()
    m, n = len(seq1), len(seq2)
    score_matrix = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            match_score = score_matrix[i - 1][j - 1] + blosum[seq1[i - 1]][seq2[j - 1]]
            delete = score_matrix[i - 1][j] + gap
            insert = score_matrix[i][j - 1] + gap
            score_matrix[i][j] = max(match_score, delete, insert)
    align1, align2 = '', ''
    i, j = m, n
    while i > 0 and j > 0:
        score_current = score_matrix[i][j]
        score_diagonal = score_matrix[i - 1][j - 1]
        score_up = score_matrix[i][j - 1]
        score_left = score_matrix[i - 1][j]
        if score_current == score_diagonal + blosum[seq1[i - 1]][seq2[j - 1]]:
            align1 += seq1[i - 1]
            align2 += seq2[j - 1]
            i -= 1
            j -= 1
        elif score_current == score_left + gap:
            align1 += seq1[i - 1]
            align2 += '-'
            i -= 1
        elif score_current == score_up + gap:
            align1 += '-'
            align2 += seq2[j - 1]
            j -= 1
    while i > 0:
        align1 += seq1[i - 1]
        align2 += '-'
        i -= 1
    while j > 0:
        align1 += '-'
        align2 += seq2[j - 1]
        j -= 1
    return f"{align1[::-1]}\n{align2[::-1]}"
